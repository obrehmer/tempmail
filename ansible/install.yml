---
- hosts: all
  name: install tempmailserver
  become: yes
  vars:
    web: 80
    ssh_port: 22
    smtp: 25
    packages:
      - python3
      - git
      - curl
      - iptables-persistent
      - python3-flask
      - python3-flask-socketio
      - python3-eventlet
      - npm
      - vite
      - postfix
      - apache2
      - apache2-utils
      - python3-passlib
    user: root
    key_file: authorized_keys.vault
    cloudflare: true
    cloudflare_sources:
      - 173.245.48.0/20
      - 103.21.244.0/22
      - 103.22.200.0/22
      - 103.31.4.0/22
      - 141.101.64.0/18
      - 108.162.192.0/18
      - 190.93.240.0/20
      - 188.114.96.0/20
      - 197.234.240.0/22
      - 198.41.128.0/17
      - 162.158.0.0/15
      - 104.16.0.0/13
      - 104.24.0.0/14
      - 172.64.0.0/13
      - 131.0.72.0/22
    server_name: tempmail.olifani.eu
    apache_log_dir: /var/log/apache2
    htpasswd_user: atomino

  tasks:
    - name: Copy private key to remote server
      copy:
        src: "{{ key_file }}"
        dest: /root/.ssh/authorized_keys
        mode: 0600

    - name: set timezone
      timezone:
        name: Europe/Oslo

    - name: change term env
      copy:
        dest: /etc/profile.d/terminal.sh
        content: |
          TERM=xterm
          export TERM

    - name: apt update
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400

    - name: install pkgs
      apt:
        name: "{{ packages }}"
        state: present

    - name: set allowed ports based on api
      set_fact:
        allowed_ports: >-
          {{
            [ssh_port] + [smtp]
          }}

    - name: set iptables rules
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item }}"
        jump: ACCEPT
        action: insert
        rule_num: 1
        comment: Allow incoming traffic on specified ports only
      loop: "{{ allowed_ports }}"

    - name: allow web only from Cloudflare IP ranges
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ web }}"
        source: "{{ item }}"
        jump: ACCEPT
        action: insert
        rule_num: 1
        comment: Allow HTTP (port 80) from Cloudflare only
      loop: "{{ cloudflare_sources }}"

    - name: disable sending emails
      iptables:
        chain: OUTPUT
        protocol: tcp
        destination_port: "{{ smtp }}"
        jump: REJECT
        action: insert
        rule_num: 1
        comment: Prevent sending emails

    - name: set iptables rules
      iptables:
        chain: INPUT
        protocol: all
        source: 127.0.0.1
        jump: ACCEPT
        action: insert
        comment: Allow incoming traffic from localhost


    - name: Allow related and established connections
      iptables:
        chain: INPUT
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT

    - name: Drop all other incoming connections
      iptables:
        chain: INPUT
        policy: DROP

    - name: Save iptables rules (IPv4)
      shell: iptables-save > /etc/iptables/rules.v4
      
    - name: create dir for email data
      file:
        path: /var/tempmail/mails
        state: directory
        owner: www-data
        group: www-data
        mode: 0750

    - name: create dir for email data
      file:
        path: /var/tempmail/misc
        state: directory
        owner: www-data
        group: www-data
        mode: 0750

    - name: create dir for email data
      file:
        path: /var/www/tempmail
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
        mode: 0750
    - name: Create empty stats.json if not exists
      copy:
        dest: /var/tempmail/misc/stats.json
        content: "{}\n"
        owner: www-data
        group: www-data
        mode: '0644'
        force: no 
    

    - name: Write Apache VirtualHost config for tempmail
      copy:
        dest: /etc/apache2/sites-available/tempmail.conf
        content: |
          <VirtualHost *:80>
              ServerName {{ server_name }}


              ErrorLog {{ apache_log_dir }}/tempmail_error.log
              CustomLog {{ apache_log_dir }}/tempmail_access.log combined

              RewriteEngine on
              RewriteCond %{REQUEST_URI} ^/$
              RewriteRule ^/$ /index.html [PT]

              <Location "/stats">
                  AuthType Basic
                  AuthName "Restricted Stats Area"
                  AuthUserFile /var/www/.htpasswd
                  Require valid-user
              </Location>

              RewriteCond %{HTTP:Upgrade} =websocket [NC]
              RewriteRule ^/socket.io/(.*) ws://127.0.0.1:5000/socket.io/$1 [P,L]

              ProxyPass /socket.io http://127.0.0.1:5000/socket.io
              ProxyPassReverse /socket.io http://127.0.0.1:5000/socket.io

              ProxyPass / http://127.0.0.1:5000/
              ProxyPassReverse / http://127.0.0.1:5000/
          </VirtualHost>
      notify: Restart Apache

    - name: Include Vault with htpasswd password
      include_vars:
        file: vault_htpasswd_password.vault
        name: vault_secrets
    
    - name: Ensure .htpasswd with user
      community.general.htpasswd:
        path: /var/www/.htpasswd
        name: "{{ htpasswd_user }}"
        password: "{{ vault_secrets.htpasswd_password }}"
        crypt_scheme: bcrypt
        create: yes
      notify: Restart Apache

    - name: Erstelle systemd service unit f√ºr tempmail
      copy:
        dest: /etc/systemd/system/tempmail.service
        content: |
          [Unit]
          Description=Tempmail Flask App
          After=network.target
    
          [Service]
          User=www-data
          WorkingDirectory=/var/www/tempmail/backend
          ExecStart=/usr/bin/python3 /var/www/tempmail/backend/app.py
          Restart=always
          Environment=FLASK_ENV=production
          Environment=PYTHONUNBUFFERED=1
    
          [Install]
          WantedBy=multi-user.target
      notify: Reload systemd daemon


    - name: Enable tempmail.service
      systemd:
        name: tempmail.service
        enabled: true
        state: started
        
    - name: Enable apache
      systemd:
        name: apache2
        enabled: true
        state: started
        
        
        
  handlers:

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Restart Apache
      service:
        name: apache2
        state: restarted
