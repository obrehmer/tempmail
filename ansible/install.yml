---
- name: Install temporary mail server
  hosts: all
  become: yes
  gather_facts: false

  vars:
    web: 80
    ssh_port: 22
    smtp: 25
    packages:
      - python3
      - git
      - curl
      - iptables-persistent
      - python3-flask
      - python3-flask-socketio
      - python3-eventlet
      - npm
      - vite
      - postfix
      - apache2
      - apache2-utils
      - python3-passlib
    key_file: authorized_keys.vault
    cloudflare: true
    cloudflare_sources:
      - 173.245.48.0/20
      - 103.21.244.0/22
      - 103.22.200.0/22
      - 103.31.4.0/22
      - 141.101.64.0/18
      - 108.162.192.0/18
      - 190.93.240.0/20
      - 188.114.96.0/20
      - 197.234.240.0/22
      - 198.41.128.0/17
      - 162.158.0.0/15
      - 104.16.0.0/13
      - 104.24.0.0/14
      - 172.64.0.0/13
      - 131.0.72.0/22
    server_name: tempmail.olifani.eu
    apache_log_dir: /var/log/apache2
    htpasswd_user: atomino
    postfix_virtual_alias_domains: "inboxcl.xyz"
    postfix_virtual_alias_maps: "regexp:/etc/postfix/virtual"

  tasks:

    # System Preparation
    - name: Copy private key to remote server
      copy:
        src: "{{ key_file }}"
        dest: /root/.ssh/authorized_keys
        mode: '0600'

    - name: Set timezone
      timezone:
        name: Europe/Oslo

    - name: Set TERM environment variable
      copy:
        dest: /etc/profile.d/terminal.sh
        content: |
          TERM=xterm
          export TERM

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400

    - name: Install required packages
      apt:
        name: "{{ packages }}"
        state: present

    # Firewall Configuration
    - name: Define allowed ports
      set_fact:
        allowed_ports: "{{ [ssh_port, smtp] }}"

    - name: Configure iptables rules for allowed ports
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item }}"
        jump: ACCEPT
        action: insert
        rule_num: 1
        comment: Allow incoming traffic on specified ports only
      loop: "{{ allowed_ports }}"

    - name: Allow HTTP traffic only from Cloudflare IP ranges
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ web }}"
        source: "{{ item }}"
        jump: ACCEPT
        action: insert
        rule_num: 1
        comment: Allow HTTP (port 80) from Cloudflare only
      loop: "{{ cloudflare_sources }}"

    - name: Block outgoing SMTP traffic
      iptables:
        chain: OUTPUT
        protocol: tcp
        destination_port: "{{ smtp }}"
        jump: REJECT
        action: insert
        rule_num: 1
        comment: Prevent sending emails

    - name: Allow incoming traffic from localhost
      iptables:
        chain: INPUT
        protocol: all
        source: 127.0.0.1
        jump: ACCEPT
        action: insert
        comment: Allow incoming traffic from localhost

    - name: Allow established and related connections
      iptables:
        chain: INPUT
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT

    - name: Set default policy to drop all other incoming connections
      iptables:
        chain: INPUT
        policy: DROP

    - name: Save iptables rules (IPv4)
      shell: iptables-save > /etc/iptables/rules.v4

    # Directory Setup
    - name: Create directory for email data (mails)
      file:
        path: /var/tempmail/mails
        state: directory
        owner: www-data
        group: www-data
        mode: '0750'

    - name: Create directory for email data (misc)
      file:
        path: /var/tempmail/misc
        state: directory
        owner: www-data
        group: www-data
        mode: '0750'

    - name: Create directory for web application
      file:
        path: /var/www/tempmail
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
        mode: '0750'

    - name: Create empty stats.json if it does not exist
      copy:
        dest: /var/tempmail/misc/stats.json
        content: "{}\n"
        owner: www-data
        group: www-data
        mode: '0644'
        force: no

    - name: Create empty active_aliases.json if it does not exist
      copy:
        dest: /var/tempmail/misc/active_aliases.json
        content: "{}\n"
        owner: www-data
        group: www-data
        mode: '0644'
        force: no


    # Apache Configuration
    - name: Write Apache VirtualHost configuration for tempmail
      copy:
        dest: /etc/apache2/sites-available/tempmail.conf
        content: |
          <VirtualHost *:80>
              ServerName {{ server_name }}

              ErrorLog {{ apache_log_dir }}/tempmail_error.log
              CustomLog {{ apache_log_dir }}/tempmail_access.log combined

              RewriteEngine on
              RewriteCond %{REQUEST_URI} ^/$
              RewriteRule ^/$ /index.html [PT]

              <Location "/stats">
                  AuthType Basic
                  AuthName "Restricted Stats Area"
                  AuthUserFile /var/www/.htpasswd
                  Require valid-user
              </Location>

              RewriteCond %{HTTP:Upgrade} =websocket [NC]
              RewriteRule ^/socket.io/(.*) ws://127.0.0.1:5000/socket.io/$1 [P,L]

              ProxyPass /socket.io http://127.0.0.1:5000/socket.io
              ProxyPassReverse /socket.io http://127.0.0.1:5000/socket.io

              ProxyPass / http://127.0.0.1:5000/
              ProxyPassReverse / http://127.0.0.1:5000/
          </VirtualHost>
      notify: Restart Apache

    - name: Include Vault with htpasswd password
      include_vars:
        file: vault_htpasswd_password.vault
        name: vault_secrets

    - name: Ensure .htpasswd with user
      community.general.htpasswd:
        path: /var/www/.htpasswd
        name: "{{ htpasswd_user }}"
        password: "{{ vault_secrets.htpasswd_password }}"
        crypt_scheme: bcrypt
        create: yes
      notify: Restart Apache

    - name: Enable Apache
      systemd:
        name: apache2
        enabled: true
        state: started

    # Systemd Service for Flask App
    - name: Create systemd service unit for tempmail
      copy:
        dest: /etc/systemd/system/tempmail.service
        content: |
          [Unit]
          Description=Tempmail Flask App
          After=network.target

          [Service]
          User=www-data
          WorkingDirectory=/var/www/tempmail/backend
          ExecStart=/usr/bin/python3 /var/www/tempmail/backend/app.py
          Restart=always
          Environment=FLASK_ENV=production
          Environment=PYTHONUNBUFFERED=1

          [Install]
          WantedBy=multi-user.target
      notify: Reload systemd daemon

    - name: Enable tempmail.service
      systemd:
        name: tempmail.service
        enabled: true
        state: started

    # Postfix Configuration
    - name: Set alias rules in /etc/postfix/virtual
      copy:
        dest: /etc/postfix/virtual
        content: |
          /.+@inboxcl\.xyz/ mailtrash
        owner: root
        group: root
        mode: '0644'
      notify: Restart Postfix

    - name: Create /etc/postfix/reject_recipients if not exist
      file:
        dest: /etc/postfix/reject_recipients
        owner: root
        group: root
        mode: '0644'
        force: no
      notify: postmap rejects


    - name: Set 'mydestination' in main.cf correctly
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: '^mydestination\s*='
        line: "mydestination = $myhostname, localhost.localdomain, localhost"
        state: present
        create: yes
      notify: Restart Postfix

    - name: Set 'virtual_alias_maps' in main.cf correctly
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: '^virtual_alias_maps\s*='
        line: "virtual_alias_maps = {{ postfix_virtual_alias_maps }}"
        state: present
        create: yes
      notify: Restart Postfix

    - name: Set 'smtpd_recipient_restrictions' in main.cf correctly
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: '^smtpd_recipient_restrictions\s*='
        line: "smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination, check_recipient_access hash:/etc/postfix/reject_recipients,
 permit"
        state: present
        create: yes
      notify: Restart Postfix


    - name: Ensure secure Postfix options are set in main.cf
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        create: yes
        state: present
        backrefs: yes
      with_items:
        - { regexp: '^mynetworks\s*=.*', line: 'mynetworks = 127.0.0.0/8' }
        - { regexp: '^home_mailbox\s*=.*', line: 'home_mailbox =' }
        - { regexp: '^local_transport\s*=.*', line: 'local_transport = error:local delivery disabled' }
        - { regexp: '^default_process_limit\s*=.*', line: 'default_process_limit = 50' }
        - { regexp: '^message_size_limit\s*=.*', line: 'message_size_limit = 10240000' }
        - { regexp: '^smtpd_helo_required\s*=.*', line: 'smtpd_helo_required = yes' }
        - { regexp: '^disable_vrfy_command\s*=.*', line: 'disable_vrfy_command = yes' }
      notify: Restart Postfix

    - name: Ensure smtpd_helo_restrictions are defined in main.cf
      blockinfile:
        path: /etc/postfix/main.cf
        marker: "# {mark} ANSIBLE MANAGED BLOCK smtpd_helo_restrictions"
        block: |
          smtpd_helo_restrictions =
              reject_invalid_helo_hostname,
              reject_non_fqdn_helo_hostname,
              reject_unknown_helo_hostname
      notify: Restart Postfix

    - name: Ensure secure SMTP service block is present in master.cf
      blockinfile:
        path: /etc/postfix/master.cf
        marker: "# {mark} ANSIBLE MANAGED BLOCK: secure SMTP service"
        insertafter: "^smtp\\s+inet"
        block: |
          smtp      inet  n       -       y       -       -       smtpd
            -o smtpd_client_connection_count_limit=10
            -o smtpd_client_connection_rate_limit=30
            -o smtpd_error_sleep_time=1s
      notify: Restart Postfix
    
    - name: Set anonymous Postfix logging options in main.cf
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: "^{{ item.option }} ="
        line: "{{ item.option }} = {{ item.value }}"
        create: yes
      loop:
        - { option: 'smtpd_tls_loglevel', value: '0' }
        - { option: 'smtp_tls_loglevel', value: '0' }
        - { option: 'debug_peer_level', value: '1' }
        - { option: 'disable_vrfy_command', value: 'yes' }
        - { option: 'header_checks', value: 'regexp:/etc/postfix/empty.cf' }

      notify: Restart Postfix

    - name: Create empty header_checks file
      copy:
        content: ''
        dest: /etc/postfix/empty.cf
        owner: root
        group: root
        mode: '0644'
      notify: Restart Postfix

    - name: Create postmap database for empty.cf
      command: postmap /etc/postfix/empty.cf
      args:
        creates: /etc/postfix/empty.cf.db
      notify: Restart Postfix


    # Optional: completely suppress Postfix logs via rsyslog
    - name: Disable Postfix logging in rsyslog (optional)
      copy:
        dest: /etc/rsyslog.d/30-postfix-anon.conf
        content: |
          if ($programname == 'postfix') then stop
      notify: Restart rsyslog


    - name: Ensure Postfix is enabled and started
      systemd:
        name: postfix
        enabled: true
        state: started

    - name: Ensure alias 'mailtrash' is correctly set in /etc/aliases
      lineinfile:
        path: /etc/aliases
        regexp: '^mailtrash:'
        line: 'mailtrash: "|sudo -u www-data /usr/bin/python3 /var/www/tempmail/backend/receive_mail.py"'
        state: present
        create: yes
      notify: Update aliases and restart Postfix

    - name: Create user 'mailtrash' without login shell
      user:
        name: mailtrash
        shell: /usr/sbin/nologin
        create_home: yes
        state: present

    - name: Configure sudo rights for 'nobody'
      blockinfile:
        path: /etc/sudoers.d/nobody_mailtrash
        create: yes
        mode: '0440'
        owner: root
        group: root
        block: |
          Defaults:nobody !requiretty
          nobody ALL=(www-data) NOPASSWD: /usr/bin/python3 /var/www/tempmail/backend/receive_mail.py
        validate: '/usr/sbin/visudo -cf %s'
    
    - name: create cronjob to cleanupold mails
      ansible.builtin.cron:
        name: "Tempmail Cleanup"
        user: root
        minute: "0"
        hour: "4"
        job: "/usr/bin/find /var/tempmail/mails/ -mtime +1 -exec rm -fr {} \\; > /dev/null 2>&1"
        state: present

    - name: create cronjob to update reject mails list
      ansible.builtin.cron:
        name: "Rejectmail update"
        user: root
        minute: "*"
        hour: "*"
        job: "/usr/bin/python3 /var/www/tempmail/backend/update_rejects.py > /dev/null 2>&1"
        state: present



  handlers:

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

    - name: Restart Postfix
      systemd:
        name: postfix
        state: restarted

    - name: Postmap virtual
      command: postmap /etc/postfix/virtual
      notify: Restart Postfix

    - name: postmap rejects
      command: postmap /etc/postfix/reject_recipients
      notify: Restart Postfix

    - name: Aktualisiere Aliases und starte Postfix neu
      shell: |
        newaliases
        systemctl restart postfix

    - name: Restart rsyslog
      service:
        name: rsyslog
        state: restarted


